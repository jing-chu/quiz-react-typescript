{"version":3,"sources":["images/solen.jpg","components/QuestionCard.style.ts","API.ts","components/QuestionCard.tsx","utils.tsx","App.style.ts","App.tsx","index.tsx"],"names":["module","exports","Difficulty","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","question","answers","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","map","answer","key","correctAnswer","disabled","value","onClick","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","array","incorrect_answers","correct_answer","sort","Math","random","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1fd919a0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/solen.9720dd81.jpg\";","import styled from 'styled-components'\n\nexport const Wrapper = styled.div`\n    max-width: 1100px;\n    background: #ebfeff;\n    border-radius: 10px;\n    padding: 20px;\n    box-shadow: 0px 5px 10px rgba(0,0,0,0.25);\n    text-align: center;\n\n    p {\n        font-size: 1rem;\n    }\n`\n\ntype ButtonWrapperProps = {\n    correct: boolean;\n    userClicked: boolean;\n}\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n    transition: all 0.3s ease;\n\n    :hover {\n        opacity: 0.8;\n    }\n\n    button {\n        cursor: pointer;\n        user-select: none;\n        font-size: 0.8rem;\n        width: 100%;\n        height: 40px;\n        margin: 5px 0;\n        background: ${({ correct, userClicked }) => \n           correct ?\n            'linear-gradient(90deg, #56ffa4, #59bc86)' :\n            !correct && userClicked ?\n            'linear-gradient(90deg, #ff5656,#c16868)' :\n            'linear-gradient(90deg, #56ccff, #6eafb4)' };\n        border: 3px solid gray;\n        box-shadow: 1px 2px 0px rgba(0,0,0,0.1);\n        border-radius: 10px;\n        color: gray;\n        text-shadow: 0px 1px 0px rgba(0,0,0,0.25)\n\n    }\n`\n    \n","import { shuffleArray } from './utils'\n\nexport type Question = {\n    catagory: string;\n    correct_answer: string;\n    difficulty: string;\n    incorrect_answers: string[];\n    question: string;\n    type:string;\n}\n\nexport type QuestionState = Question & { answers: string[]}\n\nexport enum Difficulty {\n    EASY = 'easy',\n    MEDIUM = 'medium',\n    HARD = 'hard',\n} \n\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty) => {\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&category=18&type=multiple`\n    const data = await (await fetch(endpoint)).json() \n    return data.results.map((question:Question) => (\n        {\n            ...question,\n            answers: shuffleArray([\n                ...question.incorrect_answers, \n                question.correct_answer\n            ])\n        }\n    ))\n}","import React from 'react'\nimport {AnswerObject} from '../App'\nimport { Wrapper, ButtonWrapper } from './QuestionCard.style'\n\ntype Props = {\n    question: string;\n    answers:string[];\n    callback: (e:React.MouseEvent<HTMLButtonElement>) => void;\n    userAnswer:AnswerObject | undefined;\n    questionNr:number;\n    totalQuestions:number;\n}\n\nconst QuestionCard: React.FC<Props> = ({\n    question,\n    answers,\n    callback,\n    userAnswer,\n    questionNr,\n    totalQuestions,\n}) => (\n    <Wrapper>\n        <p className='number'>\n            Question: {questionNr} / {totalQuestions}\n        </p>\n        <p dangerouslySetInnerHTML={{ __html:question}} />\n        <div>\n            {answers.map(answer => (\n                <ButtonWrapper \n                    key={answer}\n                    correct={userAnswer?.correctAnswer === answer}\n                    userClicked={userAnswer?.answer === answer}>\n                    <button disabled={userAnswer ? true : false} value={answer} onClick={callback}>\n                        <span dangerouslySetInnerHTML={{ __html:answer}} />\n                    </button>\n                </ButtonWrapper>\n            ))}\n        </div>\n    </Wrapper>\n)\n\nexport default QuestionCard","export const shuffleArray = (array: any[]) => [...array].sort(() => Math.random() - 0.5 )\n","import styled, { createGlobalStyle } from 'styled-components'\nimport BGImage from './images/solen.jpg'\n\nexport const GlobalStyle = createGlobalStyle`\n    html {\n        height: 100%;\n    }\n    body {\n        background-image: url(${BGImage});\n        background-size: cover;\n        margin: 0;\n        padding:0;\n        display: flex;\n        justify-content: center;\n    }\n\n    * {\n        box-sizing: border-box;\n        font-family: 'Catamaran', sans-serif;\n    }\n`\n\nexport const Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n    > p {\n        color: black;\n    }\n\n    . score{\n        color: black;\n        front-size: 2rem;\n        margin: 0;\n    }\n\n    h1 {\n        font-family: Fascinate Inline, Haettenschweiler, 'Arial Narrow Bold', sans-serif;\n        background-image: linear-gradient(100deg, gray, #87F1FF)\n        background-size: 100%;\n        background-clip: text;\n        --webkit-background-clip:text;\n        --webkit-text-fill-color:transparent;\n        --moz-background-clip: text;\n        --moz-text-fill-color: transparent;\n        filter: drop-shadow(2px 2px #0085a3);\n        font-size: 70px;\n        font-weight: 300;\n        text-align: center;\n        margin: 20px;\n    }\n\n    .start, .next {\n        cursor: pointer;\n        background: linear-gradient(180deg, gray, #FFCC91);\n        border: 2px solid #D38558;\n        box-shadow: 0px 5px 10px rgba(0,0,0,0.25);\n        border-radius: 10px;\n        height: 40px;\n        margin: 20px 0;\n        padding:0 40px;\n    }\n\n    .start {\n        max-width: 150px;\n    }\n`","import React, { useState } from 'react';\nimport QuestionCard from './components/QuestionCard'\nimport { fetchQuizQuestions } from './API'\nimport { QuestionState, Difficulty } from './API'\nimport { GlobalStyle, Wrapper } from './App.style'\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\n\nconst TOTAL_QUESTIONS = 10\n\nconst App = () => {\n  const [loading, setLoading] = useState(false)\n  const [questions, setQuestions] = useState<QuestionState[]>([])\n  const [number, setNumber] = useState(0)\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([])\n  const [score, setScore] = useState(0)\n  const [gameOver, setGameOver] = useState(true)\n\n  const startTrivia = async () => {\n    setLoading(true)\n    setGameOver(false)\n\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    )\n\n    setQuestions(newQuestions)\n    setScore(0)\n    setUserAnswers([])\n    setNumber(0)\n    setLoading(false)\n  }\n\n  const checkAnswer = (e:React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver){\n      const answer = e.currentTarget.value\n      const correct = questions[number].correct_answer === answer\n      if (correct) setScore(prev => prev + 1)\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      }\n      setUserAnswers((prev)=> [...prev,answerObject])\n    }\n  }\n\n  const nextQuestion = () => {\n    const nextQuestion = number + 1\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true)\n    } else {\n      setNumber(nextQuestion)\n    }\n  }\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <h1>Computer Science Quiz</h1>\n        {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n          <button className=\"start\" onClick={startTrivia}>\n            Start\n          </button>\n        ) : null}\n        {!gameOver && <p className=\"score\">Score: {score}</p>}\n        {loading && <p>Loading Questions ...</p>}      \n        {!loading && !gameOver && (\n        <QuestionCard \n          questionNr={number + 1}\n          totalQuestions={TOTAL_QUESTIONS}\n          question={questions[number].question}\n          answers={questions[number].answers}\n          userAnswer={userAnswers ? userAnswers[number]:undefined}\n          callback={checkAnswer}\n        />)\n        }\n        {!gameOver && \n        !loading && \n        userAnswers.length === number + 1 && \n        number!== TOTAL_QUESTIONS - 1 ? (\n          <button className='next' onClick={nextQuestion}>\n          Next Question\n          </button>\n        ) : null}\n        \n      </Wrapper>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}